/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def gitRevision = { ->
  def hashStdOut = new java.io.ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
  }

  return hashStdOut.toString().trim()
}

group = 'cd.go.contrib'
version = '0.0.1'
description = 'GoCD Git Pull Request Material'

ext.gitRevision = gitRevision()

project.ext.pluginDesc = [
  id         : 'cd.go.contrib.material.git-pull-request',
  version    : project.version,
  goCdVersion: '16.12.0',
  name       : project.description,
  description: "${project.description}. Supports GitHub, Stash, BitBucket and GitLab.",
  vendorName : 'GoCD Contributors',
  vendorUrl  : 'https://github.com/gocd-contrib/gocd-pull-request-material'
]

allprojects {
  apply plugin: 'java'

  group = rootProject.group
  version = rootProject.version

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
  }

  tasks.withType(JavaCompile) { compileTask ->
    options.encoding = "UTF-8"
  }

  tasks.withType(Jar) { jarTask ->
    manifest {
      attributes(
        'Implementation-Version': project.version,
        'Implementation-Revision': project.gitRevision,
        'Implementation-Title': project.name,
        'Source-Compatibility': project.sourceCompatibility,
        'Target-Compatibility': project.targetCompatibility
      )
    }

    includeEmptyDirs false
    duplicatesStrategy 'exclude'

    if (jarTask.name == 'testJar') {
      project.artifacts.add 'testOutput', jarTask
    } else {
      project.artifacts.add 'archives', jarTask
    }
  }

  tasks.withType(Test) {
    testLogging {
      showStandardStreams = true

      exceptionFormat 'full'

      beforeSuite { suite ->
        if (suite.parent) {
          logger.quiet("Running ${suite.name}")
        }
      }

      afterSuite { suite, result ->
        if (suite.parent) {
          logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
          if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Test ${suite.name} FAILED")
          }
        } else {
          logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        }
      }
    }
  }
}
